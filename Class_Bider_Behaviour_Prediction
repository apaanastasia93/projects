{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d739425d",
   "metadata": {},
   "source": [
    "## <h1><center> Data Preparation and Machine Learning </center></h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "61f32e39",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import mglearn\n",
    "\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "from sklearn.model_selection import train_test_split\n",
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "from sklearn.model_selection import cross_val_score     \n",
    "from sklearn.metrics import confusion_matrix             \n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.linear_model import LogisticRegression                     \n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "from IPython.display import Image\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5b91ada",
   "metadata": {},
   "source": [
    "Online retailer, eBay is providing an option of bidding to their customers globally. Bidding is employed to find the real price of items in the market based on the demand. The price offered by anyone participating in this process is termed as a 'bid'. Normal bids are classified as ‘0’ bids in the data set and anomalous bids as ‘1’. The goal is to use classification or clustering algorithms to predict the bids in the future."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9bed02b",
   "metadata": {},
   "source": [
    "**Data Dictionary**\n",
    "* **Record ID**: Unique identifier of a record in the dataset.\n",
    "* **Auction ID**: Unique identifier of an auction.\n",
    "* **Bidder ID**: Unique identifier of a bidder.\n",
    "* **Bidder Tendency**: A shill bidder participates exclusively in auctions of few sellers rather than a diversified lot. This is a collusive act involving the fraudulent seller and an accomplice.\n",
    "* **Bidding Ratio**: A shill bidder participates more frequently to raise the auction price and attract higher bids from legitimate participants.\n",
    "* **Successive Outbidding**: A shill bidder successively outbids himself even though he is the current winner to increase the price gradually with small consecutive increments.\n",
    "* **Last Bidding**: A shill bidder becomes inactive at the last stage of the auction (more than 90\\% of the auction duration) to avoid winning the auction.\n",
    "* **Auction Bids**: Auctions with SB activities tend to have a much higher number of bids than the average of bids in concurrent auctions.\n",
    "* **Auction Starting Price**: a shill bidder usually offers a small starting price to attract legitimate bidders into the auction.\n",
    "* **Early Bidding**: A shill bidder tends to bid pretty early in the auction (less than 25\\% of the auction duration) to get the attention of auction users.\n",
    "* **Winning Ratio**: A shill bidder competes in many auctions but hardly wins any auctions.\n",
    "* **Auction Duration**: How long an auction lasted.\n",
    "* **Class**: 0 for normal behaviour bidding; 1 for otherwise."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95e45742",
   "metadata": {},
   "source": [
    "## Content:\n",
    "### 1. Bussiness Understanding;\n",
    "### 2. Data Understanding;\n",
    "### 3. Data preparation;\n",
    "### 4. Modeling;\n",
    "### 5. Evaluation;\n",
    "### 6. Deployment;\n",
    "### References."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eba9a4d6",
   "metadata": {},
   "source": [
    "For purpose of this project we are going to use established model for data mining - **CRISP-DM** (the cross-industry standard process for data mining). CRISP-DM project consists of 6 stages. Following one another, it helps in keeping sequence of project's steps. The defined stages of CRISP-DM are:\n",
    "* Business Understanding;\n",
    "* Data understanding;\n",
    "* Data Preparation;\n",
    "* Modeling;\n",
    "* Evaluation;\n",
    "* Deployment."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a02ecd1b",
   "metadata": {},
   "source": [
    "### 1. Business understanding"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01a1f61c",
   "metadata": {},
   "source": [
    "The purpose of the Business Understanding phase is to understand what the business wants to solve. On this stage we set questions we need to answer with the project's outcome. Following the assigment task we can define the next questions within the project:\n",
    "* What features are the most important for bidding class prediction?\n",
    "* Can a target variable be predicted with an accuracy higher than 90%?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "008623ca",
   "metadata": {},
   "source": [
    "### 2. Data Understanding"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f482be21",
   "metadata": {},
   "source": [
    "The data understanding phase goes hand in hand with the business understanding phase and encourages the focus to ascertain, assemble, and scrutinize the data sets that can help us to achieve the project goals. (Trisit Kumar Chatterjee, 2020)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ad90cf3",
   "metadata": {},
   "source": [
    "My first step will be uploading the dataset. Also, I want to set **Record_ID** as an index column. The reason for that is that the **Record_ID** column contains a unique identification number which can facilitate data retrieval and handling data in general."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bb383617",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('dataset.csv', index_col='Record_ID')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d92da8f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Auction_ID</th>\n",
       "      <th>Bidder_ID</th>\n",
       "      <th>Bidder_Tendency</th>\n",
       "      <th>Bidding_Ratio</th>\n",
       "      <th>Successive_Outbidding</th>\n",
       "      <th>Last_Bidding</th>\n",
       "      <th>Auction_Bids</th>\n",
       "      <th>Starting_Price_Average</th>\n",
       "      <th>Early_Bidding</th>\n",
       "      <th>Winning_Ratio</th>\n",
       "      <th>Auction_Duration</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Record_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>732</td>\n",
       "      <td>_***i</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000028</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.000028</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>732</td>\n",
       "      <td>g***r</td>\n",
       "      <td>0.024390</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.013123</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.013123</td>\n",
       "      <td>0.944444</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>732</td>\n",
       "      <td>t***p</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.003042</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.003042</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>732</td>\n",
       "      <td>7***n</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.097477</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.097477</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>900</td>\n",
       "      <td>z***z</td>\n",
       "      <td>0.051282</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.001318</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001242</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15129</th>\n",
       "      <td>760</td>\n",
       "      <td>l***t</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.160000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.738557</td>\n",
       "      <td>0.280000</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.686358</td>\n",
       "      <td>0.888889</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15137</th>\n",
       "      <td>2481</td>\n",
       "      <td>s***s</td>\n",
       "      <td>0.030612</td>\n",
       "      <td>0.130435</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.005754</td>\n",
       "      <td>0.217391</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.000010</td>\n",
       "      <td>0.878788</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15138</th>\n",
       "      <td>2481</td>\n",
       "      <td>h***t</td>\n",
       "      <td>0.055556</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.015663</td>\n",
       "      <td>0.217391</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.015663</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15139</th>\n",
       "      <td>2481</td>\n",
       "      <td>d***d</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>0.086957</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.068694</td>\n",
       "      <td>0.217391</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.000415</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15144</th>\n",
       "      <td>2481</td>\n",
       "      <td>a***l</td>\n",
       "      <td>0.016393</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.340351</td>\n",
       "      <td>0.217391</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.340351</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6321 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Auction_ID Bidder_ID  Bidder_Tendency  Bidding_Ratio  \\\n",
       "Record_ID                                                         \n",
       "1                 732     _***i         0.200000       0.400000   \n",
       "2                 732     g***r         0.024390       0.200000   \n",
       "3                 732     t***p         0.142857       0.200000   \n",
       "4                 732     7***n         0.100000       0.200000   \n",
       "5                 900     z***z         0.051282       0.222222   \n",
       "...               ...       ...              ...            ...   \n",
       "15129             760     l***t         0.333333       0.160000   \n",
       "15137            2481     s***s         0.030612       0.130435   \n",
       "15138            2481     h***t         0.055556       0.043478   \n",
       "15139            2481     d***d         0.076923       0.086957   \n",
       "15144            2481     a***l         0.016393       0.043478   \n",
       "\n",
       "           Successive_Outbidding  Last_Bidding  Auction_Bids  \\\n",
       "Record_ID                                                      \n",
       "1                            0.0      0.000028      0.000000   \n",
       "2                            0.0      0.013123      0.000000   \n",
       "3                            0.0      0.003042      0.000000   \n",
       "4                            0.0      0.097477      0.000000   \n",
       "5                            0.0      0.001318      0.000000   \n",
       "...                          ...           ...           ...   \n",
       "15129                        1.0      0.738557      0.280000   \n",
       "15137                        0.0      0.005754      0.217391   \n",
       "15138                        0.0      0.015663      0.217391   \n",
       "15139                        0.0      0.068694      0.217391   \n",
       "15144                        0.0      0.340351      0.217391   \n",
       "\n",
       "           Starting_Price_Average  Early_Bidding  Winning_Ratio  \\\n",
       "Record_ID                                                         \n",
       "1                        0.993593       0.000028       0.666667   \n",
       "2                        0.993593       0.013123       0.944444   \n",
       "3                        0.993593       0.003042       1.000000   \n",
       "4                        0.993593       0.097477       1.000000   \n",
       "5                        0.000000       0.001242       0.500000   \n",
       "...                           ...            ...            ...   \n",
       "15129                    0.993593       0.686358       0.888889   \n",
       "15137                    0.993593       0.000010       0.878788   \n",
       "15138                    0.993593       0.015663       0.000000   \n",
       "15139                    0.993593       0.000415       0.000000   \n",
       "15144                    0.993593       0.340351       0.000000   \n",
       "\n",
       "           Auction_Duration  Class  \n",
       "Record_ID                           \n",
       "1                         5      0  \n",
       "2                         5      0  \n",
       "3                         5      0  \n",
       "4                         5      0  \n",
       "5                         7      0  \n",
       "...                     ...    ...  \n",
       "15129                     3      1  \n",
       "15137                     7      0  \n",
       "15138                     7      0  \n",
       "15139                     7      0  \n",
       "15144                     7      0  \n",
       "\n",
       "[6321 rows x 12 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a889c97",
   "metadata": {},
   "source": [
    "Next, I want to see if we have any missing values and what type of the observations we have. I will use ***.info*** function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "23ad5cb9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 6321 entries, 1 to 15144\n",
      "Data columns (total 12 columns):\n",
      " #   Column                  Non-Null Count  Dtype  \n",
      "---  ------                  --------------  -----  \n",
      " 0   Auction_ID              6321 non-null   int64  \n",
      " 1   Bidder_ID               6321 non-null   object \n",
      " 2   Bidder_Tendency         6321 non-null   float64\n",
      " 3   Bidding_Ratio           6321 non-null   float64\n",
      " 4   Successive_Outbidding   6321 non-null   float64\n",
      " 5   Last_Bidding            6321 non-null   float64\n",
      " 6   Auction_Bids            6321 non-null   float64\n",
      " 7   Starting_Price_Average  6321 non-null   float64\n",
      " 8   Early_Bidding           6321 non-null   float64\n",
      " 9   Winning_Ratio           6321 non-null   float64\n",
      " 10  Auction_Duration        6321 non-null   int64  \n",
      " 11  Class                   6321 non-null   int64  \n",
      "dtypes: float64(8), int64(3), object(1)\n",
      "memory usage: 642.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "807887e8",
   "metadata": {},
   "source": [
    "We can see that overall the dataset consists of numerical data with one column represented by 'object' data type. Data size is 6321 rows and 12 columns. We also don't observe any missing values, which means we won't have to handle them in the next chapter. \n",
    "\n",
    "Next, I want to extract some statistical information and then get a visual understanding of the data and plot some graphs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "31b5bee3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Auction_ID</th>\n",
       "      <th>Bidder_Tendency</th>\n",
       "      <th>Bidding_Ratio</th>\n",
       "      <th>Successive_Outbidding</th>\n",
       "      <th>Last_Bidding</th>\n",
       "      <th>Auction_Bids</th>\n",
       "      <th>Starting_Price_Average</th>\n",
       "      <th>Early_Bidding</th>\n",
       "      <th>Winning_Ratio</th>\n",
       "      <th>Auction_Duration</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6321.000000</td>\n",
       "      <td>6321.000000</td>\n",
       "      <td>6321.000000</td>\n",
       "      <td>6321.000000</td>\n",
       "      <td>6321.000000</td>\n",
       "      <td>6321.000000</td>\n",
       "      <td>6321.000000</td>\n",
       "      <td>6321.000000</td>\n",
       "      <td>6321.000000</td>\n",
       "      <td>6321.000000</td>\n",
       "      <td>6321.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1241.388230</td>\n",
       "      <td>0.142541</td>\n",
       "      <td>0.127670</td>\n",
       "      <td>0.103781</td>\n",
       "      <td>0.463119</td>\n",
       "      <td>0.231606</td>\n",
       "      <td>0.472821</td>\n",
       "      <td>0.430683</td>\n",
       "      <td>0.367731</td>\n",
       "      <td>4.615093</td>\n",
       "      <td>0.106787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>735.770789</td>\n",
       "      <td>0.197084</td>\n",
       "      <td>0.131530</td>\n",
       "      <td>0.279698</td>\n",
       "      <td>0.380097</td>\n",
       "      <td>0.255252</td>\n",
       "      <td>0.489912</td>\n",
       "      <td>0.380785</td>\n",
       "      <td>0.436573</td>\n",
       "      <td>2.466629</td>\n",
       "      <td>0.308867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.011765</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>589.000000</td>\n",
       "      <td>0.027027</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.047928</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.026620</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1246.000000</td>\n",
       "      <td>0.062500</td>\n",
       "      <td>0.083333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.440937</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.360104</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1867.000000</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.860363</td>\n",
       "      <td>0.454545</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.826761</td>\n",
       "      <td>0.851852</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2538.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999900</td>\n",
       "      <td>0.788235</td>\n",
       "      <td>0.999935</td>\n",
       "      <td>0.999900</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Auction_ID  Bidder_Tendency  Bidding_Ratio  Successive_Outbidding  \\\n",
       "count  6321.000000      6321.000000    6321.000000            6321.000000   \n",
       "mean   1241.388230         0.142541       0.127670               0.103781   \n",
       "std     735.770789         0.197084       0.131530               0.279698   \n",
       "min       5.000000         0.000000       0.011765               0.000000   \n",
       "25%     589.000000         0.027027       0.043478               0.000000   \n",
       "50%    1246.000000         0.062500       0.083333               0.000000   \n",
       "75%    1867.000000         0.166667       0.166667               0.000000   \n",
       "max    2538.000000         1.000000       1.000000               1.000000   \n",
       "\n",
       "       Last_Bidding  Auction_Bids  Starting_Price_Average  Early_Bidding  \\\n",
       "count   6321.000000   6321.000000             6321.000000    6321.000000   \n",
       "mean       0.463119      0.231606                0.472821       0.430683   \n",
       "std        0.380097      0.255252                0.489912       0.380785   \n",
       "min        0.000000      0.000000                0.000000       0.000000   \n",
       "25%        0.047928      0.000000                0.000000       0.026620   \n",
       "50%        0.440937      0.142857                0.000000       0.360104   \n",
       "75%        0.860363      0.454545                0.993593       0.826761   \n",
       "max        0.999900      0.788235                0.999935       0.999900   \n",
       "\n",
       "       Winning_Ratio  Auction_Duration        Class  \n",
       "count    6321.000000       6321.000000  6321.000000  \n",
       "mean        0.367731          4.615093     0.106787  \n",
       "std         0.436573          2.466629     0.308867  \n",
       "min         0.000000          1.000000     0.000000  \n",
       "25%         0.000000          3.000000     0.000000  \n",
       "50%         0.000000          5.000000     0.000000  \n",
       "75%         0.851852          7.000000     0.000000  \n",
       "max         1.000000         10.000000     1.000000  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55b72ce3",
   "metadata": {},
   "source": [
    "From the table above we can observe, that values range from 0 to 1 for each feature except **Auction_Duration** and **Auction_ID**. **Last_Bidding** and **Auction_Duration** seem to follow a normal distribution. Also, I can infer that **Winning_Ratio** and **Successive_Outbidding** have lots of observations cluster around either **0** or **1** values. And the dependent variable **Class** is more represented by **0** class than **1** as mean equals 0.1. It means that the data is imbalanced and we will have to decide how to deal with it in the next chapter. \n",
    "Let's see how many observations we have represented for each class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dce67b9e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n",
      "0    5646\n",
      "1     675\n",
      "Name: Class, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "sns.countplot(df['Class'])\n",
    "print(plt.show())\n",
    "print(df.Class.value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8700b4f",
   "metadata": {},
   "source": [
    "With the graph as well as with the ***value_counts*** we can confirm that **0** class has 5646 entries while **1** class has only 675 entries. I will see models' accuracy in the Modeling chapter and if imbalanced classes strongly affect accuracy we will have to balance them."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "961927df",
   "metadata": {},
   "source": [
    "As the only one object feature we have is a bidder name I want to see if I have any unique values and then decide if we need to keep the feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3b6f4126",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a***a    112\n",
       "n***t     85\n",
       "e***e     67\n",
       "i***a     50\n",
       "r***r     49\n",
       "        ... \n",
       "k***4      1\n",
       "-***g      1\n",
       "y***5      1\n",
       "o***.      1\n",
       "h***6      1\n",
       "Name: Bidder_ID, Length: 1054, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Bidder_ID.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b239890d",
   "metadata": {},
   "source": [
    "We can observe that we have 1054 unique values. We can't really extract any usefull information from it as it's represented by encrypted unique names, therefore I'll simply drop it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "429992dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(columns='Bidder_ID')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17418154",
   "metadata": {},
   "source": [
    "As we are dealing with a classification problem we don't need to identify correlation between variables."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e51feda1",
   "metadata": {},
   "source": [
    "I also want to take a look at boxplots for each variable to get a better understanding of distribution and outliers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "22ee3c20",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 12 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.drop('Class', axis=1).plot(kind='box', subplots=True, layout=(6,2), sharex=False, sharey=False, figsize=(10,10), title='Box Plot for each input variable')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94d8ae4e",
   "metadata": {},
   "source": [
    "**Bidder_Tendency** and **Bidding_Ratio** have many outliers. We will discuss in the next chapter if we need to remove them. **Auction_ID**, **Last_Bidding**, **Early_Bidding** and **Auction_Duration** seem to follow normal distribution. We infered earlier that **Winning_Ratio** and **Starting_Price_Average** have values mostly clustered around **0** and **1**. **Successive_Outbidding** boxplot looks interesting, as it shows that we migh have outliers. I am going to plot density graphs for these 3 features to get a better visual comprehension."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4e219e59",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AxesSubplot(0.125,0.125;0.775x0.755)\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Probability Density')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(sns.kdeplot(data=df, x='Winning_Ratio', color='r', shade=True))\n",
    "print(sns.kdeplot(data=df, x='Starting_Price_Average', color='y', shade=True))\n",
    "print(sns.kdeplot(data=df, x='Successive_Outbidding', color='b', shade=True))\n",
    "\n",
    "plt.xlabel('KDE')\n",
    "plt.ylabel('Probability Density')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15b02721",
   "metadata": {},
   "source": [
    "With the graph we can confirm the statement we made above. As for **Successive_Outbidding** variable, it's not ouliers but data is represented by only 3 values **0**, **0.5** and **1**. As number of **0** values are drastically higher than **0.5** and **1** it shows the values as outliers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ceea7656",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0    5478\n",
      "1.0     469\n",
      "0.5     374\n",
      "Name: Successive_Outbidding, dtype: int64\n",
      "count    6321.000000\n",
      "mean        0.103781\n",
      "std         0.279698\n",
      "min         0.000000\n",
      "25%         0.000000\n",
      "50%         0.000000\n",
      "75%         0.000000\n",
      "max         1.000000\n",
      "Name: Successive_Outbidding, dtype: float64\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(df.Successive_Outbidding.value_counts())\n",
    "print(df.Successive_Outbidding.describe())\n",
    "print(sns.boxplot(data=df, x='Successive_Outbidding'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f0dfaac",
   "metadata": {},
   "source": [
    "We've prepared everything we needed and now can move to another stage **Data preparation**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f824e4b0",
   "metadata": {},
   "source": [
    "### 3. Data Preparation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "962aaffc",
   "metadata": {},
   "source": [
    "This stage, which is often referred to as “data wrangling” or “data munging”, has the objective is to develop the final data set for modelling. Covers all activities to construct the final dataset from the initial raw data. Data preparation tasks are likely to be performed multiple times and not in any prescribed order. Tasks include table, record and attribute selection as well as transformation and cleaning of data for modelling tools."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bdd2364",
   "metadata": {},
   "source": [
    "I'll start the Data Preparation section with normalization. Normalization typically means rescaling the values into a range of [0,1]. (Geller, 2019)\n",
    "When we have all features normalized within one range it will help ML models run faster and with the better accuracy.\n",
    "The reason why I'll be using normalization is that most of the features are already ranged between 0 and 1 except **Auction_ID** and **Auction_Duration**, therefore I will scale only these two features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ad1b1516",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = df[['Auction_ID','Auction_Duration']]\n",
    "df2 = df.drop(columns = ['Auction_ID','Auction_Duration'])\n",
    "minmax = MinMaxScaler().fit(df1)\n",
    "minmax = minmax.transform(df1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ed10276",
   "metadata": {},
   "source": [
    "After I've applied the scaler I want to record the scaled array in DataFrame and then combine in one DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4c1b4b98",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df2.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "01f78263",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Auction_ID</th>\n",
       "      <th>Auction_Duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.287011</td>\n",
       "      <td>0.444444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.287011</td>\n",
       "      <td>0.444444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.287011</td>\n",
       "      <td>0.444444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.287011</td>\n",
       "      <td>0.444444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.353336</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6316</th>\n",
       "      <td>0.298066</td>\n",
       "      <td>0.222222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6317</th>\n",
       "      <td>0.977497</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6318</th>\n",
       "      <td>0.977497</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6319</th>\n",
       "      <td>0.977497</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6320</th>\n",
       "      <td>0.977497</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6321 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Auction_ID  Auction_Duration\n",
       "0       0.287011          0.444444\n",
       "1       0.287011          0.444444\n",
       "2       0.287011          0.444444\n",
       "3       0.287011          0.444444\n",
       "4       0.353336          0.666667\n",
       "...          ...               ...\n",
       "6316    0.298066          0.222222\n",
       "6317    0.977497          0.666667\n",
       "6318    0.977497          0.666667\n",
       "6319    0.977497          0.666667\n",
       "6320    0.977497          0.666667\n",
       "\n",
       "[6321 rows x 2 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1 = pd.DataFrame(minmax, columns = ['Auction_ID','Auction_Duration'])\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "50a1811a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Auction_ID</th>\n",
       "      <th>Auction_Duration</th>\n",
       "      <th>Bidder_Tendency</th>\n",
       "      <th>Bidding_Ratio</th>\n",
       "      <th>Successive_Outbidding</th>\n",
       "      <th>Last_Bidding</th>\n",
       "      <th>Auction_Bids</th>\n",
       "      <th>Starting_Price_Average</th>\n",
       "      <th>Early_Bidding</th>\n",
       "      <th>Winning_Ratio</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Record_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.287011</td>\n",
       "      <td>0.444444</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000028</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.000028</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.287011</td>\n",
       "      <td>0.444444</td>\n",
       "      <td>0.024390</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.013123</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.013123</td>\n",
       "      <td>0.944444</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.287011</td>\n",
       "      <td>0.444444</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.003042</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.003042</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.287011</td>\n",
       "      <td>0.444444</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.097477</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.097477</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.353336</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.051282</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.001318</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001242</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15129</th>\n",
       "      <td>0.298066</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.160000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.738557</td>\n",
       "      <td>0.280000</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.686358</td>\n",
       "      <td>0.888889</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15137</th>\n",
       "      <td>0.977497</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.030612</td>\n",
       "      <td>0.130435</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.005754</td>\n",
       "      <td>0.217391</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.000010</td>\n",
       "      <td>0.878788</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15138</th>\n",
       "      <td>0.977497</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.055556</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.015663</td>\n",
       "      <td>0.217391</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.015663</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15139</th>\n",
       "      <td>0.977497</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.076923</td>\n",
       "      <td>0.086957</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.068694</td>\n",
       "      <td>0.217391</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.000415</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15144</th>\n",
       "      <td>0.977497</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.016393</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.340351</td>\n",
       "      <td>0.217391</td>\n",
       "      <td>0.993593</td>\n",
       "      <td>0.340351</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6321 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Auction_ID  Auction_Duration  Bidder_Tendency  Bidding_Ratio  \\\n",
       "Record_ID                                                                 \n",
       "1            0.287011          0.444444         0.200000       0.400000   \n",
       "2            0.287011          0.444444         0.024390       0.200000   \n",
       "3            0.287011          0.444444         0.142857       0.200000   \n",
       "4            0.287011          0.444444         0.100000       0.200000   \n",
       "5            0.353336          0.666667         0.051282       0.222222   \n",
       "...               ...               ...              ...            ...   \n",
       "15129        0.298066          0.222222         0.333333       0.160000   \n",
       "15137        0.977497          0.666667         0.030612       0.130435   \n",
       "15138        0.977497          0.666667         0.055556       0.043478   \n",
       "15139        0.977497          0.666667         0.076923       0.086957   \n",
       "15144        0.977497          0.666667         0.016393       0.043478   \n",
       "\n",
       "           Successive_Outbidding  Last_Bidding  Auction_Bids  \\\n",
       "Record_ID                                                      \n",
       "1                            0.0      0.000028      0.000000   \n",
       "2                            0.0      0.013123      0.000000   \n",
       "3                            0.0      0.003042      0.000000   \n",
       "4                            0.0      0.097477      0.000000   \n",
       "5                            0.0      0.001318      0.000000   \n",
       "...                          ...           ...           ...   \n",
       "15129                        1.0      0.738557      0.280000   \n",
       "15137                        0.0      0.005754      0.217391   \n",
       "15138                        0.0      0.015663      0.217391   \n",
       "15139                        0.0      0.068694      0.217391   \n",
       "15144                        0.0      0.340351      0.217391   \n",
       "\n",
       "           Starting_Price_Average  Early_Bidding  Winning_Ratio  Class  \n",
       "Record_ID                                                               \n",
       "1                        0.993593       0.000028       0.666667      0  \n",
       "2                        0.993593       0.013123       0.944444      0  \n",
       "3                        0.993593       0.003042       1.000000      0  \n",
       "4                        0.993593       0.097477       1.000000      0  \n",
       "5                        0.000000       0.001242       0.500000      0  \n",
       "...                           ...            ...            ...    ...  \n",
       "15129                    0.993593       0.686358       0.888889      1  \n",
       "15137                    0.993593       0.000010       0.878788      0  \n",
       "15138                    0.993593       0.015663       0.000000      0  \n",
       "15139                    0.993593       0.000415       0.000000      0  \n",
       "15144                    0.993593       0.340351       0.000000      0  \n",
       "\n",
       "[6321 rows x 11 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df1.join(df2, how='outer')\n",
    "index = df2['Record_ID']\n",
    "df = df.set_index('Record_ID')\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aac9a4c9",
   "metadata": {},
   "source": [
    "Finally, we've got the DataFrame with all feature ranged with the same range [0,1]. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b71dae0",
   "metadata": {},
   "source": [
    "#### Features importances"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "854048f5",
   "metadata": {},
   "source": [
    "As a part of my business understanding part I've defined a question I would like to get an answer *'What features are the most important for bidding class prediction?'*\n",
    "In order to get an answer on the question I'll be using the ***DecisionTreeClassifier*** which will range fetures by their importance.\n",
    "Feature importance is calculated as the decrease in node impurity weighted by the probability of reaching that node. The node probability can be calculated by the number of samples that reach the node, divided by the total number of samples. The higher the value the more important the feature. (Ronaghan, 2018)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e650306e",
   "metadata": {},
   "source": [
    "As a first step of defining features importances I'll separate independent variables from the dependent variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "58d8825f",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop(columns = 'Class')\n",
    "y = df['Class']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d9151bf",
   "metadata": {},
   "source": [
    "Next, I'll run the DecisionTreeClassifier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "dc47c172",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier()"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cls = DecisionTreeClassifier()\n",
    "cls.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cd7c3bab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Auction_ID', 'Auction_Duration', 'Bidder_Tendency', 'Bidding_Ratio',\n",
       "       'Successive_Outbidding', 'Last_Bidding', 'Auction_Bids',\n",
       "       'Starting_Price_Average', 'Early_Bidding', 'Winning_Ratio'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "importances = cls.feature_importances_\n",
    "columns = X.columns\n",
    "columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21ad457b",
   "metadata": {},
   "source": [
    "I want to plot a graph to display features importances in descending order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fd65c685",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Percentage of importances')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 4320x2160 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_import = pd.DataFrame(importances, columns = ['Feature importances'], index=columns)\n",
    "df_import['Percentage'] = pd.DataFrame((df_import.sort_values(by= ['Feature importances'], ascending=False)/df_import.shape[0])*100)\n",
    "pd.options.display.float_format = \"{:.2f}\".format \n",
    "df_import=df_import.sort_values(by= ['Percentage'], ascending=False)\n",
    "\n",
    "# plotting features importances\n",
    "g = df_import['Percentage'].plot(kind = 'bar', figsize=(60,30), fontsize=24, color = 'pink')\n",
    "g.set_title('Features importances', fontsize=70)\n",
    "g.set_xlabel('Features', fontsize=50)\n",
    "g.set_ylabel('Percentage of importances', fontsize=50)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "657cf2d8",
   "metadata": {},
   "source": [
    "We see that three the most important features for predicting the target variable are:\n",
    "* ***Successive_Outbidding***;\n",
    "* ***Auction_Duration***;\n",
    "* ***Winning_Ratio***,\n",
    "\n",
    "and the less important are:\n",
    "* ***Starting_Price_Average***;\n",
    "* ***Auction_ID***;\n",
    "* ***Early_Bidding***."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "671fc941",
   "metadata": {},
   "source": [
    "#### Dimensionality reduction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3ac4192",
   "metadata": {},
   "source": [
    "We use dimensionality reduction when  we want to decrease the number of features in a dataset. Two techniques for dimensionality reduction are:\n",
    "* Principal Component Analysis (PCA);\n",
    "* Linear Discriminant Analysis (LDA).\n",
    "\n",
    "Both LDA and PCA are linear transformation techniques: LDA is a supervised whereas PCA is unsupervised – PCA ignores class labels. In contrast to PCA, LDA attempts to find a feature subspace that maximizes class separability. (Raschka, 2022)\n",
    "In this chapter I want to apply both PCA and LDA and compare results."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e42e636",
   "metadata": {},
   "source": [
    "##### PCA"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73d7fec9",
   "metadata": {},
   "source": [
    "PCA is a statistical variance based procedure that converts a set of observations of possibly correlated variables into a set of values of linearly uncorrelated variables called principal components. In simpler words, PCA is often used to simplify data, reduce noise, and find unmeasured “latent variables”. (Volpi, 2020)\n",
    "We've already separated independants variables and the target variable, therefore we can apply PCA straight away."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8e143ef",
   "metadata": {},
   "source": [
    "First, I want to plot an Explained varaince ratio graph to see how much of the variance in the original data is encapsulated in the new component variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e6cc5a65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Cumulative explained variance')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pca = PCA().fit(X)\n",
    "plt.plot(np.cumsum(pca.explained_variance_ratio_))\n",
    "plt.title('Explained variance ratio', fontsize = 20)\n",
    "plt.xlabel('Number of components')\n",
    "plt.ylabel('Cumulative explained variance')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04760feb",
   "metadata": {},
   "source": [
    "From the graph above we see that in order to keep 90% of the original data we need to use 6 components."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f4a95e7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "pca = PCA(n_components=6)\n",
    "projected = pca.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "31e7eb1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.36141299, 0.20827264, 0.15559512, 0.07863725, 0.06955875,\n",
       "       0.05760696])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "explained_variance = pca.explained_variance_ratio_\n",
    "explained_variance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbd47db0",
   "metadata": {},
   "source": [
    "First 3 components contain the most ammount of data while the last three contain less than 20%. This the last step I want to create a DataFrame with 6 components and a target variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "557981c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC 1</th>\n",
       "      <th>PC 2</th>\n",
       "      <th>PC 3</th>\n",
       "      <th>PC 4</th>\n",
       "      <th>PC 5</th>\n",
       "      <th>PC 6</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Record_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.28</td>\n",
       "      <td>-0.28</td>\n",
       "      <td>0.74</td>\n",
       "      <td>-0.19</td>\n",
       "      <td>0.02</td>\n",
       "      <td>-0.28</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.34</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>0.82</td>\n",
       "      <td>-0.20</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>-0.47</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.37</td>\n",
       "      <td>-0.09</td>\n",
       "      <td>0.87</td>\n",
       "      <td>-0.20</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>-0.46</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.28</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>0.80</td>\n",
       "      <td>-0.21</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>-0.48</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-0.82</td>\n",
       "      <td>-0.21</td>\n",
       "      <td>-0.04</td>\n",
       "      <td>-0.04</td>\n",
       "      <td>0.28</td>\n",
       "      <td>-0.09</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           PC 1  PC 2  PC 3  PC 4  PC 5  PC 6  Class\n",
       "Record_ID                                           \n",
       "1         -0.28 -0.28  0.74 -0.19  0.02 -0.28      0\n",
       "2         -0.34 -0.13  0.82 -0.20 -0.00 -0.47      0\n",
       "3         -0.37 -0.09  0.87 -0.20 -0.00 -0.46      0\n",
       "4         -0.28 -0.01  0.80 -0.21 -0.00 -0.48      0\n",
       "5         -0.82 -0.21 -0.04 -0.04  0.28 -0.09      0"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "principal_df = pd.DataFrame(data = projected, columns = ['PC 1','PC 2','PC 3','PC 4','PC 5','PC 6'], index=index)\n",
    "df_pca = principal_df.join(y, how='outer')\n",
    "df_pca.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ae84ccd",
   "metadata": {},
   "source": [
    "##### LDA"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e8e4f6b",
   "metadata": {},
   "source": [
    "Linear Discriminant Analysis, or LDA, uses the information from both features to create a new axis and projects the data on to the new axis in such a way as to minimizes the variance and maximizes the distance between the means of the two classes. (Maklin, 2019)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e7bf151",
   "metadata": {},
   "source": [
    "I start with ***fit_transform*** of the both dependent and independent variables and then will take a look at the explained_variance_ratio."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f7efedc6",
   "metadata": {},
   "outputs": [],
   "source": [
    "lda = LinearDiscriminantAnalysis()\n",
    "x_lda = lda.fit_transform(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1bcad7f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lda.explained_variance_ratio_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea8578d3",
   "metadata": {},
   "source": [
    "As our target variable is represented only by 2 classes, the LDA has reduced the number of components to 1. If we had at least two components we would be able to plot the data on the two-dimension graph. However in our case the data is represented by one dimension and the plot would look like a simple one dimension line.\n",
    "I want to create a DataFrame and record there LDA 1 we got as well as the target variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e9c7ee5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LDA 1</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Record_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.71</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.64</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.61</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.61</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-0.82</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>-0.72</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>-0.70</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>7.61</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>7.40</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>3.38</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           LDA 1  Class\n",
       "Record_ID              \n",
       "1          -0.71      0\n",
       "2          -0.64      0\n",
       "3          -0.61      0\n",
       "4          -0.61      0\n",
       "5          -0.82      0\n",
       "8          -0.72      0\n",
       "10         -0.70      0\n",
       "12          7.61      1\n",
       "13          7.40      1\n",
       "27          3.38      1"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "linear_df = pd.DataFrame(data = x_lda, columns = ['LDA 1'], index=index)\n",
    "df_lda = linear_df.join(y, how='outer')\n",
    "df_lda.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9007d2b3",
   "metadata": {},
   "source": [
    "From the table above we see, that negative numbers in LDA 1 belong to '0 class' and positive numbers belong to '1 class'."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b60ff52f",
   "metadata": {},
   "source": [
    "PCA dimensionality reduction method allows us to choose the number of components we need to use. Apart from PCA in LDA we can't control the number of components they will be always reduced by one from number of classes we have represented as a target variable. However, LDA is a better use for solving classification problems as it creates a clear separation between classes. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acea9255",
   "metadata": {},
   "source": [
    "It was the last step of this stage. The dataset is ready for applying ML models. For the purpose of the modeling stage I'm going to use dataset with applied LDA."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69d44c52",
   "metadata": {},
   "source": [
    "### 4. Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "160635aa",
   "metadata": {},
   "source": [
    "At this stage we will select the actual modelling technique that is to be used. It can be one or several models. According to the CA task I'll choose two models to work with and will explain my choice.\n",
    "As a first step of the stage I'll separate the target variable from dependent variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "93d7eb71",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df_lda.drop(columns='Class')\n",
    "y = df_lda['Class']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15d8d1aa",
   "metadata": {},
   "source": [
    "Next, I'll split the dataset on train and test parts, keeping train part equals to 65% and train part 35%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "73a3c573",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((4108, 1), (2213, 1), (4108,), (2213,))"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.35, random_state=1, shuffle=True)\n",
    "X_train.shape, X_test.shape, y_train.shape, y_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c3e97f7",
   "metadata": {},
   "source": [
    "The first algorithm I'll be working with is a Logistic Regression. Logistic Regression is a Supervised Machine Learning classification algorithm that is used to predict the probability of a categorical dependent variable. (Li, 2017).\n",
    "The reason why I'll be using the Logistic regression algorithm is because it's designed for two-class (binary) problems, modeling the target using a binomial probability distribution function."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "196b93bf",
   "metadata": {},
   "source": [
    "#### Logistic Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "609989e7",
   "metadata": {},
   "source": [
    "First step is to fit the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a34b9f51",
   "metadata": {},
   "outputs": [],
   "source": [
    "logreg = LogisticRegression()\n",
    "logreg.fit(X_train, y_train)\n",
    "y_pred = logreg.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16405730",
   "metadata": {},
   "source": [
    "With the next step I want to define the best model's parameters in order to get the best possible accuracy.\n",
    "I'll be working with the next LogisticRegression parameters:\n",
    "* **solvers**;\n",
    "* **penalty**;\n",
    "* **c_values**.\n",
    "\n",
    "**Solvers** - Algorithm to use in the optimization problem:\n",
    "* For small datasets, ‘liblinear’ is a good choice, whereas ‘sag’ and ‘saga’ are faster for large ones;\n",
    "* For multiclass problems, only ‘newton-cg’, ‘sag’, ‘saga’ and ‘lbfgs’ handle multinomial loss;\n",
    "* ‘liblinear’ is limited to one-versus-rest schemes.\n",
    "\n",
    "**Penalty** - Specify the norm of the penalty:\n",
    "* 'none': no penalty is added;\n",
    "* 'l2': add a L2 penalty term and it is the default choice;\n",
    "* 'l1': add a L1 penalty term;\n",
    "\n",
    "**C_values** - Inverse of regularization strength; must be a positive float. Like in support vector machines, smaller values specify stronger regularization."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eeceba11",
   "metadata": {},
   "source": [
    "##### Tuning hyper-parameters of an estimator"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98976c46",
   "metadata": {},
   "source": [
    "We need to records parameters we've defined in a list:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "69109d49",
   "metadata": {},
   "outputs": [],
   "source": [
    "solvers = ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga']\n",
    "penalty = ['none','l1','l2']\n",
    "c_values = [100, 10, 1.0, 0.1, 0.01]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aeac9892",
   "metadata": {},
   "source": [
    "To tune the parameters we will be using GridSearchCV. GridSearchCV is as exhaustive search over specified parameter values for an estimator. Grid Search uses a different combination of all the specified hyperparameters and their values and calculates the performance for each combination and selects the best value for the hyperparameters. (Shah, 2021)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "3632ba7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "grid = dict(solver=solvers,penalty=penalty,C=c_values)\n",
    "grid_search = GridSearchCV(estimator=logreg, param_grid=grid, n_jobs=-1, scoring='accuracy',error_score=0)\n",
    "grid_result = grid_search.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "0c7de700",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.979908 using {'C': 0.1, 'penalty': 'l2', 'solver': 'liblinear'}\n"
     ]
    }
   ],
   "source": [
    "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n",
    "means = grid_result.cv_results_['mean_test_score']\n",
    "stds = grid_result.cv_results_['std_test_score']\n",
    "params = grid_result.cv_results_['params']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e85fdd1",
   "metadata": {},
   "source": [
    "We've defined that the best accuracy will'be reached by using C=0.1, penalty = 'l2' and a  solver = 'liblinear'. Now, let's train the model with these parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "762db710",
   "metadata": {},
   "outputs": [],
   "source": [
    "logreg = LogisticRegression(C=0.1, penalty='l2', solver='liblinear')\n",
    "logreg.fit(X_train, y_train)\n",
    "y_pred = logreg.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e7f7a2e",
   "metadata": {},
   "source": [
    "Let's see what accuracy we get on training and testins set to make sure the model is not underfitted or overfitted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6e72c871",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training score: 0.979\n",
      "Testing score: 0.975\n"
     ]
    }
   ],
   "source": [
    "print('Training score: {:.3f}'.format(logreg.score(X_train,y_train)))\n",
    "print('Testing score: {:.3f}'.format(logreg.score(X_test,y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebe09851",
   "metadata": {},
   "source": [
    "Wee see that both training and testing scores are high and the model perfoms well on both sets. The last step is to run the classification report and identify ***Type I and Type II errors***."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "ff422c95",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.97      0.99      1989\n",
      "           1       0.80      1.00      0.89       224\n",
      "\n",
      "    accuracy                           0.97      2213\n",
      "   macro avg       0.90      0.98      0.94      2213\n",
      "weighted avg       0.98      0.97      0.98      2213\n",
      "\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred))\n",
    "print(sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='.4g',                 \n",
    "                 xticklabels=['Normal behaviour (0 class)','Otherwise (1 class)'],                \n",
    "                 yticklabels=['Normal behaviour (0 class)','Otherwise (1 class)'],                  \n",
    "                 cbar=False, cmap='Blues'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "948cdcc5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Image(filename='Image.png') "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89227250",
   "metadata": {},
   "source": [
    "We can obserse that the model perfomed very well. Over 1984 **0 class** values 55 were predicted as False Positive and over 224 **1 class** values only 1 was predicted as False Negative, which is a very good result."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57974980",
   "metadata": {},
   "source": [
    "Next ML model I want to use is a DecisionTreeClassifier. Decision Tree is a Supervised Machine Learning Algorithm that uses a set of rules to make decisions. The intuition behind Decision Trees is that we use the dataset features to create yes/no questions and continually split the dataset until we isolate all data points belonging to each class. Every time we ask a question we add a node to the tree. The result of asking a question splits the dataset based on the value of a feature, and creates new nodes. The algorithm tries to completely separate the dataset such that all leaf nodes, i.e., the nodes that don’t split the data further, belong to a single class. These are called pure leaf nodes. In the end, the algorithm can only assign one class to the data points in each leaf node. (Bento, 2021)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e847a14b",
   "metadata": {},
   "source": [
    "#### Decision Tree"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a727bc6c",
   "metadata": {},
   "source": [
    "Fitting the model first:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "bb61beda",
   "metadata": {},
   "outputs": [],
   "source": [
    "tree = DecisionTreeClassifier(random_state=1)\n",
    "tree.fit(X_train, y_train)\n",
    "y_pred = tree.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "253c9758",
   "metadata": {},
   "source": [
    "Similarly to the previous chapter we want to define the best parameters in order to reach the best accuracy. For this model I'll be chechking the next parameters:\n",
    "* **Max_depth**;\n",
    "* **Min_samples_leaf**.\n",
    "\n",
    "**Max_depth** - The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.\n",
    "\n",
    "**Min_samples_leaf** - The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least min_samples_leaf training samples in each of the left and right branches. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0ca2629",
   "metadata": {},
   "source": [
    "##### Tuning hyper-parameters of an estimator"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ceaee3f",
   "metadata": {},
   "source": [
    "For both hyperparameters defined I'll create a range between 1 to 20. The estimator will check each value of both in order to define the best ones."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "74c04cfe",
   "metadata": {},
   "outputs": [],
   "source": [
    "depth = range(1, 20)\n",
    "leaf = range(1, 20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "4ed67db0",
   "metadata": {},
   "outputs": [],
   "source": [
    "grid = dict(max_depth=depth,min_samples_leaf=leaf)\n",
    "grid_search = GridSearchCV(estimator=tree, param_grid=grid, n_jobs=-1, scoring='accuracy',error_score=0)\n",
    "grid_result = grid_search.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "05363013",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.981649 using {'max_depth': 4, 'min_samples_leaf': 4}\n"
     ]
    }
   ],
   "source": [
    "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n",
    "means = grid_result.cv_results_['mean_test_score']\n",
    "stds = grid_result.cv_results_['std_test_score']\n",
    "params = grid_result.cv_results_['params']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72c15f23",
   "metadata": {},
   "source": [
    "We see that the estimator has defined **max_depth** and **min_samples_leaf** both equal 4. Let's train the model by using defined parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "ffdd24c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "tree = DecisionTreeClassifier(max_depth=4, min_samples_leaf=4, random_state=1)\n",
    "tree.fit(X_train, y_train)\n",
    "y_pred = tree.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "32637c0e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training score: 0.984\n",
      "Testing score: 0.978\n"
     ]
    }
   ],
   "source": [
    "print('Training score: {:.3f}'.format(tree.score(X_train,y_train)))\n",
    "print('Testing score: {:.3f}'.format(tree.score(X_test,y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b19add5",
   "metadata": {},
   "source": [
    "Training and testing accuracy I've got are a bit higher than with the LogisticRegression and should give us a better result in the classification report."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "cfa3afa2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.98      0.99      1989\n",
      "           1       0.83      0.99      0.90       224\n",
      "\n",
      "    accuracy                           0.98      2213\n",
      "   macro avg       0.91      0.98      0.95      2213\n",
      "weighted avg       0.98      0.98      0.98      2213\n",
      "\n",
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred))\n",
    "print(sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='.4g',                 \n",
    "                 xticklabels=['Normal behaviour (0 class)','Otherwise (1 class)'],                \n",
    "                 yticklabels=['Normal behaviour (0 class)','Otherwise (1 class)'],                  \n",
    "                 cbar=False, cmap='Blues'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "839e1f4f",
   "metadata": {},
   "source": [
    "We infer that with this model over 1984 **0 class** values 46 were predicted as False Positive and over 224 **1 class** values 2 were predicted as False Negative."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bd5a560",
   "metadata": {},
   "source": [
    "In the table below some main comparative characteristics are presented:\n",
    "\n",
    "\n",
    "| <center> **Comparative characteristics**  <center>   |  <center> **LogisticRegression** <center>  |  <center> **DecisionTreeClassifier**  <center> |  \n",
    "| ----------- | ----------- | ----------- |\n",
    "| <center> Number of used hyperparameters  <center>    | <center> 3  <center>     | <center> 2<center> | \n",
    "| <center> Running time <center>  | <center> ~ 5 sec <center>        | <center> ~ 5 sec <center> | \n",
    "| <center> Training accuracy  <center>  | <center> 0.979 <center>        | <center> 0.984 <center> | \n",
    "| <center> Testing accuracy  <center>  | <center> 0.975 <center>        | <center> 0.978 <center> | \n",
    "| <center> Type I error  <center>  | <center> 55 <center>        | <center> 46 <center> |\n",
    "| <center> Type II error  <center>  | <center> 1 <center>        | <center> 2 <center> |\n",
    "    \n",
    "We can conclude, that overall both models perfomed very well, however the DecisionTreeClassifier perfomed slightly better."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fc87680",
   "metadata": {},
   "source": [
    "### 5. Evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "115c9e03",
   "metadata": {},
   "source": [
    "The Evaluation phase is different from the Modeling technical evaluation. This phase evaluates the model concerning the business indicator and what to do next.\n",
    "On the business understanding stage we've defined two main question we would like to get answers with the project:\n",
    "* What features are the most important for bidding class prediction?\n",
    "* Can a target variable be predicted with an accuracy higher than 90%?\n",
    "\n",
    "We detected that three the most important features for predicting the target variable are:\n",
    "\n",
    "* **Successive_Outbidding**;\n",
    "* **Auction_Duration**;\n",
    "* **Winning_Ratio**,\n",
    "\n",
    "and the less important are:\n",
    "\n",
    "* **Starting_Price_Average**;\n",
    "* **Auction_ID**;\n",
    "* **Early_Bidding**.\n",
    "\n",
    "It means that next time when mining data we can focus more on getting observations for top 3 most important features and don't give great importance the less important features.\n",
    "\n",
    "Also we found out that the target variable can be predicted with an accuracy higher than 90% if using the LogisticRegression and the DecisionTreeClassifier models."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c7d4544",
   "metadata": {},
   "source": [
    "### 6. Deployment"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "007def7f",
   "metadata": {},
   "source": [
    "Although on practice the stage is being used as a way to deliver findings and outcomes to the user, I'll use the part to conclude what I've done.\n",
    "So far, I've been able to deliver business goals, I had defined on the business understanding stage. I determined most important features which can be used in future for data mining. Both of model had perfomed really well and satisfied the accuracy requirements. I tuned hyperparameters and compared perfomance of two models. I was able to implement two dimensionality reduction techniques and compared the results."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
